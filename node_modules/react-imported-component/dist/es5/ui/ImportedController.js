"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var react_1 = tslib_1.__importStar(require("react"));
exports.importedState = react_1.createContext(undefined);
exports.HydrationState = function (_a) {
    var state = _a.state, children = _a.children;
    return (react_1.default.createElement(exports.importedState.Provider, { value: state }, children));
};
/**
 * this component just creates a "the first-most" effect in the system
 */
var HydrationEffect = function (_a) {
    var loopCallback = _a.loopCallback;
    react_1.useLayoutEffect(loopCallback, []);
    return null;
};
/**
 * @see [LazyBoundary]{@link LazyBoundary} - HydrationController is required for LazyBoundary to properly work with React>16.10
 * Established a control over LazyBoundary suppressing fallback during the initial hydration
 * @param props
 * @param [props.usesHydration=true] determines of Application is rendered using hydrate
 */
exports.ImportedController = function (_a) {
    var children = _a.children, _b = _a.usesHydration, usesHydration = _b === void 0 ? true : _b;
    var _c = react_1.useState({
        usesHydration: usesHydration,
        pastHydration: false,
    }), state = _c[0], setState = _c[1];
    var onFirstHydration = react_1.useCallback(function () { return setState(function (oldState) { return (tslib_1.__assign({}, oldState, { pastHydration: true })); }); }, []);
    return (react_1.default.createElement(react_1.default.Fragment, null,
        react_1.default.createElement(HydrationEffect, { loopCallback: onFirstHydration }),
        react_1.default.createElement(exports.HydrationState, { state: state }, children)));
};
